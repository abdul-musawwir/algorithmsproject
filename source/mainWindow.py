# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from functions.Coin_Change import *
from functions.knapsack import *
from functions.LCS import *
from functions.LD import *
from functions.LIS import *
from functions.MCM import *
from functions.partition import *
from functions.Rod_Cutting import *
from functions.SCS import *
from functions.Word_Break import *


# import json
import pandas as pd

from PyQt5 import QtCore, QtGui, QtWidgets
from output import Ui_MainWindows
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from utils.constants import Constants
from utils.openFileWidget import App
from utils.exec_time import *


class Ui_MainWindow(object):
    souce_code = None
    file = ""
    input_file = None
    selectedprogram = None
    html_source_code = """<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">
                                             <html><head></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">"""

    html_input_file = """<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">
                                             <html><head></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">"""

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setWindowIcon(QtGui.QIcon('image/logo.png'))
        # set the title
        MainWindow.setWindowTitle("Icon")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.dynamicAlgos = QtWidgets.QComboBox(self.centralwidget)
        self.dynamicAlgos.setObjectName("dynamicAlgos")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.addItem("")
        self.dynamicAlgos.activated[str].connect(self.choices)

        self.gridLayout.addWidget(self.dynamicAlgos, 0, 0, 1, 2)
        self.sourceCodeLable = QtWidgets.QLabel(self.centralwidget)
        self.sourceCodeLable.setObjectName("sourceCodeLable")
        self.gridLayout.addWidget(self.sourceCodeLable, 3, 0, 1, 1)
        self.selectfile = QtWidgets.QPushButton(self.centralwidget)
        self.selectfile.setObjectName("selectfile")
        self.selectfile.clicked.connect(
            self.selectFile)  # select file button action

        self.gridLayout.addWidget(self.selectfile, 0, 2, 1, 1)
        self.selectedFileName = QtWidgets.QLabel(self.centralwidget)
        self.selectedFileName.setObjectName("selectedFileName")
        self.gridLayout.addWidget(self.selectedFileName, 0, 3, 1, 1)
        self.sorceCodeBox = QtWidgets.QTextEdit(self.centralwidget)
        self.sorceCodeBox.setObjectName("sorceCodeBox")
        self.gridLayout.addWidget(self.sorceCodeBox, 4, 0, 1, 5)
        self.inputFileBox = QtWidgets.QTextEdit(self.centralwidget)
        self.inputFileBox.setObjectName("inputFileBox")
        self.gridLayout.addWidget(self.inputFileBox, 2, 0, 1, 5)
        self.inputFileLable = QtWidgets.QLabel(self.centralwidget)
        self.inputFileLable.setObjectName("inputFileLable")
        self.gridLayout.addWidget(self.inputFileLable, 1, 0, 1, 1)
        self.Execute = QtWidgets.QPushButton(self.centralwidget)
        self.Execute.setObjectName("Execute")

        self.Execute.clicked.connect(
            self.execute)  # execute button  action

        self.gridLayout.addWidget(self.Execute, 0, 4, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuDevelopers = QtWidgets.QMenu(self.menuAbout)
        self.menuDevelopers.setObjectName("menuDevelopers")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionMuhammadUsama = QtWidgets.QAction(MainWindow)
        self.actionMuhammadUsama.setObjectName("actionMuhammadUsama")
        self.actionAbdul_Musawwir = QtWidgets.QAction(MainWindow)
        self.actionAbdul_Musawwir.setObjectName("actionAbdul_Musawwir")
        self.menuDevelopers.addAction(self.actionMuhammadUsama)
        self.menuDevelopers.addAction(self.actionAbdul_Musawwir)
        self.menuAbout.addSeparator()
        self.menuAbout.addAction(self.menuDevelopers.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def choices(self, text):
        self.selectedprogram = text
        self.souce_code = None
        self.retranslateUi(MainWindow)
        self.html_input_file = """<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">
                                             <html><head></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">"""

        self.html_source_code = """<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">
                                             <html><head></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">"""
        # self.retranslateUi(MainWindow)
        if Constants.Longest_Common_Subsequence["key"] == text:
            f = open(Constants.Longest_Common_Subsequence["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)
            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"
            self.retranslateUi(MainWindow)

        elif Constants.Shortest_Common_Supersequence["key"] == text:
            f = open(Constants.Shortest_Common_Supersequence["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)

        elif Constants.Levenshtein_Distance["key"] == text:
            f = open(Constants.Levenshtein_Distance["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)

        elif Constants.Longest_Increasing_Subsequence["key"] == text:
            f = open(Constants.Longest_Increasing_Subsequence["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)

        elif Constants.Matrix_Chain_Multiplication["key"] == text:
            f = open(Constants.Matrix_Chain_Multiplication["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)

        elif Constants._0_1_knapsack_problem["key"] == text:
            f = open(Constants._0_1_knapsack_problem["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)

        elif Constants.Partition_problem["key"] == text:
            f = open(Constants.Partition_problem["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)

        elif Constants.Rod_Cutting_Problem["key"] == text:
            f = open(Constants.Rod_Cutting_Problem["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)

        elif Constants.Coin_change_making_problem["key"] == text:
            f = open(Constants.Coin_change_making_problem["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)

        else:
            f = open(Constants.Word_Break_Problem["fileName"], "r")
            lines = f.readlines()
            formated_lines = ""
            for line in lines:
                formated_lines = formated_lines + line + "<br>"
            self.souce_code = formated_lines
            print(self.souce_code)

            self.html_source_code = self.html_source_code + \
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                str(self.souce_code) + "</p></body></html>"

            self.retranslateUi(MainWindow)
        self.sorceCodeBox.update()
        # self.retranslateUi(MainWindow)

    def file_open(self):
        name = QtGui.QFileDialog.getOpenFileName(self, 'Open File')
        file = open(name, 'r')

        # self.editor()

        with file:
            text = file.read()
            print(text)
            # self.textEdit.setText(text)

    def close_application(self):
        choice = QtGui.QMessageBox.question(self, 'Extract!',
                                            "Get into the chopper?",
                                            QtGui.QMessageBox.Yes | QtGui.QMessageBox.No)
        if choice == QtGui.QMessageBox.Yes:
            print("Extracting Naaaaaaoooww!!!!")
            sys.exit()
        else:
            pass

    def selectFile(self):
        self.html_input_file = """<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">
                                             <html><head></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">"""
        try:
            ex = App()
            ex.openFileNameDialog()
            print(ex.filename)
            f = open(ex.filename)
            extrect = ex.filename.split("/")
            self.file = extrect[-1]
            # data = json.load(f)
            data = pd.read_csv(f)
            print(data)
            self.input_file = data["data"]
            f.close()
            for val in data["data"]:
                string = str(val)
                # print(str(string))
                self.html_input_file = self.html_input_file + \
                    "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">" + \
                    str(string) + "</p>"
            self.html_input_file = self.html_input_file + "</body></html>"
            self.retranslateUi(MainWindow)
        except:
            print("error")

    def execute(self):
        executionTime = 0
        output = ""
        if self.selectedprogram == None:
            return True
        elif Constants.Longest_Common_Subsequence["key"] == self.selectedprogram:
            x = self.input_file[0]
            y = self.input_file[1]
            print(x)
            print(y)
            value, executionTime = exec_time(lambda: LCSLength(
                str(x), str(y)))
            output = "The length of LCS is " + str(value)

        elif Constants.Shortest_Common_Supersequence["key"] == self.selectedprogram:

            X = str(self.input_file[0])
            Y = str(self.input_file[1])
            print(X)
            m = len(X)
            n = len(Y)
            T = [[0 for x in range(n + 1)] for y in range(m + 1)]
            value, executionTime = exec_time(lambda: SCS(
                X, Y, m, n, T))
            output = "The Shortest Common SuperSequence is " + str(value)

        elif Constants.Levenshtein_Distance["key"] == self.selectedprogram:
            x = str(self.input_file[0])
            y = str(self.input_file[1])
            value, executionTime = exec_time(lambda: dist(
                x, y))
            output = "The Levenshtein Distance is " + str(value)

        elif Constants.Longest_Increasing_Subsequence["key"] == self.selectedprogram:
            A = str(self.input_file)
            value, executionTime = exec_time(lambda: LIS(A))
            output = "Length of LIS is " + str(value)

        elif Constants.Matrix_Chain_Multiplication["key"] == self.selectedprogram:
            dims = self.input_file
            T = [[0 for x in range(len(dims))] for y in range(len(dims))]
            value, executionTime = exec_time(
                lambda: MatrixChainMultiplication(dims, 0, len(dims) - 1, T))
            output = "Minimum cost is " + str(value)

        # iske input files show nhi ho rhin baaki sab ka input overlap horha hai
        elif Constants._0_1_knapsack_problem["key"] == self.selectedprogram:
            v = self.input_file[2][1:-1]
            w = self.input_file[3][1:-1]
            v = list(map(int, v.split(',')))
            w = list(map(int, w.split(',')))
            W = int(self.input_file[0])
            print((v))
            value, executionTime = exec_time(lambda: knapSack(v, w, W))
            output = "Knapsack value is " + str(value)

        elif Constants.Partition_problem["key"] == self.selectedprogram:
            A = self.input_file
            value, executionTime = exec_time(
                lambda: partition(A))
            if value:
                output = "Yes! partition is possible"
            else:
                output = "No! partition is not possible"

        # same problem as MCM due to dictionary
        elif Constants.Rod_Cutting_Problem["key"] == self.selectedprogram:
            price = self.input_file[1][1:-1]
            n = self.input_file[2]
            price = list(map(int, price.split(',')))
            print(type(price[0]))
            print(n)

            value, executionTime = exec_time(lambda: rodCut(price, int(n)))
            output = "Profit is " + str(value)

        # same problem as MCM due to dictionary
        elif Constants.Coin_change_making_problem["key"] == self.selectedprogram:
            S = self.input_file[0][1:-1]
            N = self.input_file[1]
            S = list(map(int, S.split(',')))

            coins, executionTime = exec_time(lambda: findMinCoins(S, int(N)))
            if coins != float('inf'):
                output = "Minimum number of coins required to get desired change is " + \
                    str(coins)
            else:
                output = "No change can be acquired"

        else:  # same problem as MCM due to dictionary
            dictx = self.input_file[1]
            strx = self.input_file[0]
            lookup = [-1] * (len(strx) + 1)

            value, executionTime = exec_time(
                lambda: wordBreak(dictx, strx, lookup))
            if value:
                output = "String can be segmented"
            else:
                output = "String can't be segmented"

        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindows(executionTime, output, self.selectedprogram)
        self.ui.setupUi(self.window)
        self.window.show()
        print("execute")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        MainWindow.setWindowIcon(QtGui.QIcon('source/image/logo.png'))
        self.dynamicAlgos.setItemText(0, _translate(
            "MainWindow", "Select File"))
        self.dynamicAlgos.setItemText(1, _translate(
            "MainWindow", "Longest Common Subsequence"))
        self.dynamicAlgos.setItemText(2, _translate(
            "MainWindow", "Shortest Common Supersequence"))
        self.dynamicAlgos.setItemText(3, _translate(
            "MainWindow", "Levenshtein Distance (edit-distance)"))
        self.dynamicAlgos.setItemText(4, _translate(
            "MainWindow", "Longest Increasing Subsequence"))
        self.dynamicAlgos.setItemText(5, _translate(
            "MainWindow", "Matrix Chain Multiplication (Order finding /paranthesization)"))
        self.dynamicAlgos.setItemText(6, _translate(
            "MainWindow", "0-1-knapsack-problem"))
        self.dynamicAlgos.setItemText(
            7, _translate("MainWindow", "Partition-problem"))
        self.dynamicAlgos.setItemText(8, _translate(
            "MainWindow", "Rod Cutting Problem"))
        self.dynamicAlgos.setItemText(9, _translate(
            "MainWindow", "Coin-change-making-problem"))
        self.dynamicAlgos.setItemText(
            10, _translate("MainWindow", "Word Break Problem"))
        self.sourceCodeLable.setText(_translate("MainWindow", "Source Code"))
        self.selectfile.setText(_translate("MainWindow", "select file"))
        self.selectedFileName.setText(_translate("MainWindow", self.file))
        self.sorceCodeBox.setHtml(self.html_source_code)
        self.inputFileBox.setHtml(self.html_input_file)
        self.inputFileLable.setText(_translate("MainWindow", "Input File"))
        self.Execute.setText(_translate("MainWindow", "Execute"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.menuDevelopers.setTitle(_translate("MainWindow", "Developers"))
        self.actionMuhammadUsama.setText(_translate(
            "MainWindow", "Muhammad Usama K180154"))
        self.actionAbdul_Musawwir.setText(
            _translate("MainWindow", "Abdul Musawwir"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
